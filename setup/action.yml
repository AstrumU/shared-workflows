name: "Configure Environment"
description: "Shared configuration for checkout, NodeJS and package manager"
inputs:
  nodeVersion:
    description: "NodeJS Version to use"
    required: false
    default: ".nvmrc"
  packageManager:
    description: "Package Manager"
    required: false
    default: yarn
  pnpmVersion:
    description: "PNPM Manager version"
    required: false
    default: "7"
  cacheVersion:
    description: "PNPM/YARN cache version"
    required: true
    default: v1

runs:
  using: composite
  steps:
    - uses: actions/checkout@v3
      name: Checkout
      with:
        fetch-depth: 0
        ref: ${{ github.event.workflow_run.head_branch }}

    - name: Setup pnpm
      id: pnpm_setup
      if: inputs.packageManager == 'pnpm'
      uses: pnpm/action-setup@v2.2.4
      with:
        version: ${{ inputs.pnpmVersion }}
        run_install: false

    - name: setup node
      uses: actions/setup-node@v3
      with:
        node-version-file: ${{ inputs.nodeVersion }}

    - name: Setup yarn
      id: yarn_setup
      if: inputs.packageManager == 'yarn'
      shell: bash
      run: npm i -g yarn

    - name: Restore node_modules cache yarn
      id: yarn_cache
      if: inputs.packageManager == 'yarn'
      uses: actions/cache@v3
      with:
        path: |
          node_modules
          packages/**/node_modules
        key: ${{ runner.os }}-${{ inputs.cacheVersion }}-${{ hashFiles('yarn.lock') }}

    - name: Restore node_modules cache pnpm
      id: pnpm_cache
      if: inputs.packageManager == 'pnpm'
      uses: actions/cache@v3
      with:
        path: |
          node_modules
          packages/**/node_modules
        key: ${{ runner.os }}-${{ inputs.cacheVersion }}-${{ hashFiles('pnpm-lock.yaml') }}

    - name: yarn dependencies
      shell: bash
      if: steps.yarn_cache.outputs.cache-hit != 'true'
      run: ${{ inputs.packageManager }} install --frozen-lockfile --check-files --ignore-scripts

    - name: pnpm dependencies
      shell: bash
      if: steps.pnpm_cache.outputs.cache-hit != 'true'
      run: ${{ inputs.packageManager }} install --frozen-lockfile --check-files --ignore-scripts
