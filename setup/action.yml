name: 'Configure Environment'
description: 'Shared configuration for checkout, NodeJS and package manager'
inputs:
  nodeVersion:
    description: 'NodeJS Version to use'
    required: true
    default: '18'
  workingDirectory:
    description: 'Working directory'
    required: false
    default: './'
  packageManager:
    description: 'Package Manager'
    required: false
    default: yarn

runs:
  using: composite
  steps:
    - name: Setup ${{ inputs.packageManager }}
      id: pnpm_setup
      if: inputs.packageManager == 'pnpm'
      uses: pnpm/action-setup@v2.2.4
      with:
        version: 7.13.3
        run_install: false

    - name: setup node
      uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.nodeVersion }}
        cache: ${{ inputs.packageManager }}
        cache-dependency-path: |
          **/pnpm-lock.yaml
          **/yarn.lock

    - name: Restore node_modules cache ${{ inputs.packageManager }}
      id: pnpm_cache
      if: inputs.packageManager == 'pnpm'
      uses: actions/cache@v3
      with:
          path: |
            node_modules
            packages/**/node_modules
          key: ${{ runner.os }}-${{ env.CACHE_VERSION }}-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_VERSION }}-${{ hashFiles('pnpm-lock.yaml') }}

    - name: Restore node_modules cache ${{ inputs.packageManager }}
      id: yarn_cache
      if: inputs.packageManager == 'yarn'
      uses: actions/cache@v3
      with:
          path: |
            node_modules
            packages/**/node_modules
          key: ${{ runner.os }}-${{ env.CACHE_VERSION }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_VERSION }}-${{ hashFiles('yarn.lock') }}

    - name: yarn install
      shell: bash
      if: |
        inputs.packageManager == 'yarn'
         && steps.yarn_cache.outputs.cache-hit != 'true'
      run: yarn install --frozen-lockfile --check-files --ignore-scripts
      working-directory: ${{ inputs.workingDirectory }}
      env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}

    - name: pnpm install
      shell: bash
      if: |
        inputs.packageManager == 'yarn'
         && steps.pnpm_cache.outputs.cache-hit != 'true'
      run: pnpm install --frozen-lockfile
      working-directory: ${{ inputs.workingDirectory }}
      env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
